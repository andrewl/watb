THIS IS OUTDATED. Now running on a combination of Silex, jQuery, Leaflet and Solr.

Where Are The Bikes?
====================
...is a general purpose, lightweight framework for gathering and searching docking stations for bicycle hire schemes. Rather than duplicate code for each scheme around the world this can be used to easily extend to any new schemes that come online. 



INSTALLATION
============
- create a MySQL database using watb.sql
- rename db.inc.php.SAMPLE to db.inc.php and edit your MySQL connection settings
- set up an Apache Virtual Host with the document root pointing at the www directory
- from the command line enter the feeder directory and run feeder.php - it should populate your database with information from the London Bike Hire scheme and the Paris Velib. Ideally you'd put this in a cron job.
- go to index.html to try out a few of the API calls



ADDING NEW SCHEMES
==================
To get data from a new scheme into the database all you need to do is create a new file <MYSCHEME>.class.php in the schemes directory which should contain a class extending BikeHireFeeder and implementing the update(), name() and description() methods. This should just do whatever it needs to do to get the data for the scheme, create a new Station object for each docking station and call the Station::save() method. See london.class.php for an example/template.



API CALLS
=========
/scheme - returns an array of all schemes keyed by their id

/scheme/id - returns information about scheme id


/scheme/id/stations - returns information about all stations in scheme id. Set scheme id to 'all' for all stations. Takes the following query options to limit the number of statons
* An array of params used to limit the number of stations returned
* filter = 4 (only stations with no free stands) 3 (only stations with no bikes) 2 (only stations with empty stands) or 1 (only stations with bikes available)
* bbox = x0,y0,x1,y1 (only stations within these bounds)
* nearest = x0,y0 (order by distance from x0, y0)
* max_dist = max distance in metres from nearest
* count = number of stations to return
* page = used in conjunction with count. Returns n'th page of count results

eg /scheme/all/stations?filter=2&nearest=0.1,51.2&max_dist=1000&count=5 will return a maximum of 5 nearest stations with empty stands within 1000 metres to 0.1 longitude, 51.2 latitude.

/scheme/id/station/sid - return information about station sid in scheme id.



TODO
====
- Documentation on architecture
- Log4PHP for some (better) logging, error handling.
- More output formats, xml, csv, yaml?
- More schemes. Always need more schemes. Those based on Velib (eg Dublin) are straightforward. Others require a little more hackery.
- EC2 AMI?
- Varnish VCL filtering on rounded lat-longs (would depend on density of stations?)
- Parallel processing of schemes eg velib that require multiple http request.
- Rewrite some of the code so it's less ugly - poss using a very, very, lightweight framework that provides routing etc.
- The code was mostly written in a couple of evenings powered by cold+flu remedies. Could do with some work, maybe using an off-the-shelf lightweight framework.





